#!/bin/bash
#
# Copyright 2018 (c) BlueData Software, Inc.
#
#

set -o pipefail
SELF=$(readlink -nf $0)
export CONFIG_BASE_DIR=$(dirname ${SELF})
source ${CONFIG_BASE_DIR}/logging.sh
source ${CONFIG_BASE_DIR}/utils.sh

export ROLE="$(invoke_bdvcli --get node.role_id)"
export NODEGROUP="$(invoke_bdvcli --get node.nodegroup_id)"
export FQDN="$(invoke_bdvcli --get node.fqdn)"
#export PROJECT_REPO="$(invoke_bdvcli --get cluster.project_repo)"
export PROJECT_REPO=$(mount | grep -o '/bd-fs-mnt/.* type' | head -1 | head -c -6)
export CLUSTERID="$(invoke_bdvcli --get cluster.id)"
export CONFIGCLI_LOC=$(python -c "import imp; print imp.find_module('configcli')[1]")
export JOBDIR="/bd-fs-mnt/project_repo/misc/$CLUSTERID"
export SITE_PACKAGES=$(python3 -c "import site; print(site.getsitepackages()[0])")

diff(){
  awk 'BEGIN{RS=ORS=" "}
       {NR==FNR?a[$0]++:a[$0]--}
       END{for(k in a)if(a[k])print k}' <(echo -n "${!1}") <(echo -n "${!2}")
}

setup_haproxy () {
  GUNICORN_SERVER=""
  NODES=$(invoke_bdvcli --get_nodegroup_fqdns $NODEGROUP)
  Op=$1
  DELETED=$2
  Initial=($(echo "$NODES" | tr ',' '\n'))
  Updated=($(echo "$DELETED" | tr ',' '\n'))

  if [[ $Op == "--delnodes" ]]; then
      log "Deleting nodes from haproxy"
      log "Initial nodes .."
      log ${Initial[*]}
      log "Deleted nodes .."
      log ${Updated[*]}
      log "New Array after deletion"
      
      Array=( ${Initial[*]} )
      #Array=($(diff Initial[@] Updated[@]))
      log $Array
  elif [[ $Op == "--addnodes" ]]; then
      log "In addnodes"
      Array=( ${Initial[*]} )
      #Array=1
  fi

  for i in "${Array[@]}"
    do
      var=$((var + 1))
      GUNICORN_SERVER+="server $i $i:10001 check\n   "
  done

  log_exec cp -f ${CONFIG_BASE_DIR}/nsswitch.conf /etc/nsswitch.conf
  log_exec cp ${CONFIG_BASE_DIR}/haproxy.cfg.template ${CONFIG_BASE_DIR}/haproxy.cfg
  log_exec sed -i "s/@@@GUNICORN_SERVERS@@@/'$GUNICORN_SERVER'/g" ${CONFIG_BASE_DIR}/haproxy.cfg
  log_exec sed -i "s/@@@FQDN@@@/'$FQDN'/g" ${CONFIG_BASE_DIR}/haproxy.cfg
  log_exec mv ${CONFIG_BASE_DIR}/haproxy.cfg /etc/haproxy/
}

if [[ "$1" == "--addnodes" ]]; then
    ## Nothing to do on the existing nodes when we receive this notification.
    if [[ "$ROLE" == "LoadBalancer" ]]; then
      log "Updating haproxy for added nodes"
      setup_haproxy "--addnodes" ""
      log "Successfully  updated haproxy with new nodes, reloading haproxy.."
      #log_exec haproxy -f /etc/haproxy/haproxy.cfg -p /var/run/haproxy.pid -sf $(cat /var/run/haproxy.pid) &
      log_exec systemctl reload haproxy
      log "Successfully reloaded haproxy"
    fi
    exit 0
elif [[ "$1" == "--delnodes" ]]; then
    ## Nothing to do on the existing nodes when we receive this notification.
    if [[ "$ROLE" == "LoadBalancer" ]]; then
      log "Updating haproxy for deleted nodes"
      setup_haproxy "--delnodes" $7
      log "Successfully  updated haproxy and removed nodes, reloading haproxy.."
      #log_exec haproxy -f /etc/haproxy/haproxy.cfg -p /var/run/haproxy.pid -sf $(cat /var/run/haproxy.pid) &
      log_exec systemctl reload haproxy
      log "Successfully reloaded haproxy"
    fi
    exit 0

elif [[ "$1" == "--delete" ]]; then
    if [[ "$ROLE" == "LoadBalancer" ]]; then
        Db=$PROJECT_REPO/misc/$CLUSTERID/db.json
        if [ -f "$Db" ]; then
            log_exec rm -rf $PROJECT_REPO/misc/$CLUSTERID
        fi
    fi
    exit 0
elif [[ "$1" == "--reattach" ]]; then
    log "Reattaching ... "
    exit 0
elif [[ "$1" == "--configure" ]]; then
    log "Starting configuration ... "

    ## Fall through to start the configuration.
else
    echo "ERROR: Unknown command line option(s): '$@'"
    exit 10
fi

# Indicate start of configuration to BD_VLIB
#invoke_bdvcli --startconfiguration

#source ${CONFIG_BASE_DIR}/macros.sh

# This macro automatically designates one node from the nodegroup as primary
#AUTO_ASSIGN_PRIMARY

####################### AUTOGENERATED CODE STARTS BELOW #######################

#if FS mount is not attached, exit the cluster setup.
if [ ! -e /bd-fs-mnt ]; then
      log "FS Mount not attached" 1>&2
      exit 1
fi

#creating training job directory

sudo mkdir -vp $JOBDIR
sudo chmod 777 $JOBDIR
log "Converting configcli to python 3"
#log_exec 2to3 --output-dir=/opt/anaconda3/lib/python3.7/site-packages/configcli3 -W -n $CONFIGCLI_LOC
#log_exec 2to3 --output-dir=/opt/miniconda/lib/python3.8/site-packages/configcli3 -W -n $CONFIGCLI_LOC
log_exec 2to3 --output-dir=$SITE_PACKAGES/configcli3 -W -n $CONFIGCLI_LOC

if [[ "$ROLE" == "LoadBalancer" ]]; then
  log "getting DB password"
  # get the default password and store it in a temporary variable
  export tp="`sudo cat /var/log/mysqld.log | grep -o 'generated for root@localhost: .*' | tail -c 13`"
  log "starting mysqld service"
  # start mysql service
  log_exec sudo systemctl start mysqld
  log "started mysql server"
  # run the sql script to configure mysql
  sudo mysql -uroot -p"$tp" --connect-expired-password < /usr/lib/mysql_files/mysql-init
  log "configured mysql server"
  log "creating directory for cluster"
  log_exec mkdir -p $PROJECT_REPO/misc/$CLUSTERID
  # testing s3 download function
  log "started downloading s3 model and scoring scripts"
  log_exec python3 $CONFIG_BASE_DIR/s3utils.py 
fi


log "starting flask server ..."
log "registering gunicorn webserver ..."
log_exec sed -i "s/@@@FQDN@@@/'$FQDN'/g" ${CONFIG_BASE_DIR}/gunicornstart
log_exec cp ${CONFIG_BASE_DIR}/gunicornstart /bin/
log_exec cp ${CONFIG_BASE_DIR}/gunicorn.service /etc/systemd/system/
#log_exec cp -rf ${CONFIG_BASE_DIR}/bd_vlib3 /opt/bluedata/vagent/vagent/python/
#KEY="services.gunicorn.${NODEGROUP}.${ROLE}"
log_exec sudo systemctl start gunicorn
#invoke_bdvcli --service_key=$KEY --systemctl="gunicorn"
if [[ "$ROLE" == "LoadBalancer" ]]; then
     setup_haproxy "--addnodes" ""
   #KEY="services.haproxy.${NODEGROUP}.${ROLE}"
   #invoke_bdvcli --service_key=$KEY --systemctl="haproxy"
   # attempt to  start haproxy after verifying that gunicorn has started. If gunicorn is not up ,wait for 10 secs
   i=0

   while [ $i -lt 20 ]
   do
     ((i++))
     echo "Attempts to start haproxy: $i"
     if [[ "$(systemctl is-active  gunicorn)" == "active" ]]; then
       if [[ "$(systemctl is-active haproxy)" == "active" ]]; then
         log "Started Haproxy"
         break
       else
         log_exec sudo systemctl start haproxy
         log_exec sleep 60
       fi
     else
       log_exec sleep 60
       # call to start gunicorn is given before the while loop starts, so we do not start that service again.
     fi
done

if [[ "$(systemctl is-active haproxy)" != "active" ]]; then
      log "Failed to start haproxy"
      exit 1
fi


fi



#if [ ! -e /bd-fs-mnt ]; log "fsmount not mounted 2nd check";  fi
if [ -e /bd-fs-mnt ]; then
      log "fsmount correctly configured";  
fi
